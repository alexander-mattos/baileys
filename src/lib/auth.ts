// lib/auth.ts
import { NextRequest, NextResponse } from 'next/server';

// Sess√£o fict√≠cia para desenvolvimento
export const devSession = {
    user: {
        id: 'dev-user-id',
        name: 'Desenvolvedor',
        email: 'dev@example.com',
        companyId: 1, // ID da empresa para desenvolvimento
    }
};

// Detectar se estamos em modo de desenvolvimento para autentica√ß√£o
export const isDevAuthMode = () => {
    return process.env.NEXT_PUBLIC_SKIP_AUTH === 'true';
};

/**
 * Middleware simples para verificar autentica√ß√£o
 * @param handler Fun√ß√£o que processa a requisi√ß√£o ap√≥s verifica√ß√£o
 */
export function withAuth(handler: (req: NextRequest, session: any) => Promise<NextResponse>) {
    return async (request: NextRequest) => {
        // Em modo de desenvolvimento, use a sess√£o fict√≠cia
        if (isDevAuthMode()) {
            console.log('üîì Usando autentica√ß√£o de desenvolvimento');
            return handler(request, devSession);
        }

        // Em modo de produ√ß√£o, verificar token no cookie ou header
        // Aqui voc√™ implementaria a l√≥gica real de verifica√ß√£o de token
        const authHeader = request.headers.get('authorization');

        if (!authHeader || !authHeader.startsWith('Bearer ')) {
            return NextResponse.json({ error: 'N√£o autorizado' }, { status: 401 });
        }

        const token = authHeader.substring(7);

        try {
            // Aqui voc√™ verificaria o token (exemplo simplificado)
            // Na pr√°tica, voc√™ usaria uma biblioteca como jwt para validar o token
            if (token === 'invalid-token') {
                throw new Error('Token inv√°lido');
            }

            // Simular recupera√ß√£o de dados do usu√°rio
            const userSession = {
                user: {
                    id: '123',
                    name: 'Usu√°rio Real',
                    email: 'usuario@exemplo.com',
                    companyId: 1,
                }
            };

            return handler(request, userSession);
        } catch (error) {
            console.error('Erro na autentica√ß√£o:', error);
            return NextResponse.json({ error: 'Token inv√°lido ou expirado' }, { status: 401 });
        }
    };
}